/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sims;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author BHUBAN
 */
public class AHP extends javax.swing.JFrame {

    /**
     * Creates new form AHP
     */
    TableModel tableBackup;
    int order=0;
    public AHP() {
        initComponents();
        LHSPanel.setBorder(BorderFactory.createTitledBorder("Tables in SIMS"));
        RHSPanel.setBorder(BorderFactory.createTitledBorder("Selected Table"));
        InsertPanel.setBorder(BorderFactory.createTitledBorder("Insert Record"));
        LHSPanel1.setBorder(BorderFactory.createTitledBorder("Tables in SIMS"));
        RHSPanel1.setBorder(BorderFactory.createTitledBorder("Selected Table"));
        RHSPanel.setVisible(false);
        RHSPanel1.setVisible(false);
        InsertPanel.setVisible(false);
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String query="show tables";
            System.out.println(query);
            Statement stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery(query);
            rs.last();
            int row=rs.getRow();
            System.out.println(row);
            String tables[]=new String[row];
            rs.beforeFirst();
            int i=0;
            while(rs.next())
            {
                tables[i++]=rs.getString("Tables_in_sims");
            }
            ListTable.setModel(new javax.swing.AbstractListModel() {
            String[] strings = tables;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
            });
            ListTable1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = tables;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
            });
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        GUIMode = new javax.swing.JPanel();
        LHSPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListTable = new javax.swing.JList();
        RHSPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        bSave = new javax.swing.JButton();
        bDelRow = new javax.swing.JButton();
        InsertPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableInsert = new javax.swing.JTable();
        bInsert = new javax.swing.JButton();
        CMDMode = new javax.swing.JPanel();
        LHSPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ListTable1 = new javax.swing.JList();
        RHSPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        LQuery = new javax.swing.JLabel();
        bExecute = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        queryArea = new javax.swing.JTextArea();
        Logout = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ListTable.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListTable);

        javax.swing.GroupLayout LHSPanelLayout = new javax.swing.GroupLayout(LHSPanel);
        LHSPanel.setLayout(LHSPanelLayout);
        LHSPanelLayout.setHorizontalGroup(
            LHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
            .addGroup(LHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(LHSPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        LHSPanelLayout.setVerticalGroup(
            LHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
            .addGroup(LHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(LHSPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                TableVetoableChange(evt);
            }
        });
        jScrollPane2.setViewportView(Table);

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bDelRow.setText("delete row");
        bDelRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDelRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RHSPanelLayout = new javax.swing.GroupLayout(RHSPanel);
        RHSPanel.setLayout(RHSPanelLayout);
        RHSPanelLayout.setHorizontalGroup(
            RHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(RHSPanelLayout.createSequentialGroup()
                .addComponent(bDelRow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bSave))
        );
        RHSPanelLayout.setVerticalGroup(
            RHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RHSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RHSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSave)
                    .addComponent(bDelRow))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        TableInsert.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableInsert.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane7.setViewportView(TableInsert);

        bInsert.setText("Insert");
        bInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertPanelLayout = new javax.swing.GroupLayout(InsertPanel);
        InsertPanel.setLayout(InsertPanelLayout);
        InsertPanelLayout.setHorizontalGroup(
            InsertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
            .addGroup(InsertPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bInsert))
        );
        InsertPanelLayout.setVerticalGroup(
            InsertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInsert)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout GUIModeLayout = new javax.swing.GroupLayout(GUIMode);
        GUIMode.setLayout(GUIModeLayout);
        GUIModeLayout.setHorizontalGroup(
            GUIModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GUIModeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LHSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GUIModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InsertPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RHSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        GUIModeLayout.setVerticalGroup(
            GUIModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GUIModeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GUIModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GUIModeLayout.createSequentialGroup()
                        .addComponent(LHSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(GUIModeLayout.createSequentialGroup()
                        .addComponent(RHSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InsertPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 349, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("GUI mode", GUIMode);

        ListTable1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ListTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ListTable1MousePressed(evt);
            }
        });
        ListTable1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListTable1ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(ListTable1);

        javax.swing.GroupLayout LHSPanel1Layout = new javax.swing.GroupLayout(LHSPanel1);
        LHSPanel1.setLayout(LHSPanel1Layout);
        LHSPanel1Layout.setHorizontalGroup(
            LHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 145, Short.MAX_VALUE)
            .addGroup(LHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(LHSPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        LHSPanel1Layout.setVerticalGroup(
            LHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
            .addGroup(LHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(LHSPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table1.setEnabled(false);
        jScrollPane6.setViewportView(Table1);

        LQuery.setText("Query: ");

        bExecute.setText("Execute");
        bExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExecuteActionPerformed(evt);
            }
        });

        queryArea.setColumns(20);
        queryArea.setRows(5);
        jScrollPane4.setViewportView(queryArea);

        javax.swing.GroupLayout RHSPanel1Layout = new javax.swing.GroupLayout(RHSPanel1);
        RHSPanel1.setLayout(RHSPanel1Layout);
        RHSPanel1Layout.setHorizontalGroup(
            RHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(RHSPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LQuery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bExecute)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RHSPanel1Layout.setVerticalGroup(
            RHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RHSPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RHSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LQuery)
                    .addComponent(bExecute)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout CMDModeLayout = new javax.swing.GroupLayout(CMDMode);
        CMDMode.setLayout(CMDModeLayout);
        CMDModeLayout.setHorizontalGroup(
            CMDModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CMDModeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LHSPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RHSPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        CMDModeLayout.setVerticalGroup(
            CMDModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CMDModeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CMDModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RHSPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LHSPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(469, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CMD mode", CMDMode);

        jButton1.setText("Confirm Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LogoutLayout = new javax.swing.GroupLayout(Logout);
        Logout.setLayout(LogoutLayout);
        LogoutLayout.setHorizontalGroup(
            LogoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogoutLayout.createSequentialGroup()
                .addGap(237, 237, 237)
                .addComponent(jButton1)
                .addContainerGap(302, Short.MAX_VALUE))
        );
        LogoutLayout.setVerticalGroup(
            LogoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LogoutLayout.createSequentialGroup()
                .addContainerGap(600, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(135, 135, 135))
        );

        jTabbedPane1.addTab("Logout", Logout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExecuteActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String query=queryArea.getText();
            String cmd="";
            for(int i=0;i<query.length() && query.charAt(i)!=' ';++i)
            {
                if(i==0)
                    cmd=""+query.charAt(i);
                else
                {
                    cmd=cmd+query.charAt(i);
                }
            }
            System.out.println(cmd);
            Statement stmt=con.createStatement();
            int counter=0;
            if(!cmd.toLowerCase().equals("select"))
            {
                System.out.println(query);
                try{
                    stmt.executeUpdate(query);
                }
                catch(SQLException e)
                {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            else
            {
                //query="select * from "+ListTable1.getSelectedValue();
                try{
                    ResultSet rs=stmt.executeQuery(query);
                    ResultSetMetaData rsmd=rs.getMetaData();
                    rs.last();
                    int row=rs.getRow();
                    rs.beforeFirst();;
                    int col=rsmd.getColumnCount();
                    Object obj[][]=new Object[row][col];
                    String colnm[]=new String[col];
                    int i=0;
                    while(rs.next())
                    {
                        for(int j=0;j<col;++j)
                        {
                            obj[i][j]=rs.getString(j+1);
                            System.out.print(obj[i][j]+" ");
                        }
                        i++;
                        System.out.println();
                    }
                    for(i=0;i<col;++i)
                        colnm[i]=rsmd.getColumnName(i+1);
                    Table1.setModel(new javax.swing.table.DefaultTableModel(obj,colnm));
                    RHSPanel1.setVisible(true);
                }
                catch(SQLException e)
                {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_bExecuteActionPerformed

    private void ListTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListTable1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ListTable1MousePressed

    private void ListTable1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListTable1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ListTable1ValueChanged

    private void ListTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListTable1MouseClicked
        // TODO add your handling code here:
        System.out.println(ListTable1.getSelectedValue());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String query="select * from "+ListTable1.getSelectedValue();
            System.out.println(query);
            Statement stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            rs.last();
            int row=rs.getRow();
            rs.beforeFirst();;
            int col=rsmd.getColumnCount();
            Object obj[][]=new Object[row][col];
            String colnm[]=new String[col];
            int i=0;
            while(rs.next())
            {
                for(int j=0;j<col;++j)
                {
                    obj[i][j]=rs.getString(j+1);
                    System.out.print(obj[i][j]+" ");
                }
                i++;
                System.out.println();
            }
            for(i=0;i<col;++i)
                colnm[i]=rsmd.getColumnName(i+1);
            Table1.setModel(new javax.swing.table.DefaultTableModel(obj,colnm));
            tableBackup=new javax.swing.table.DefaultTableModel(obj,colnm);
            RHSPanel1.setVisible(true);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_ListTable1MouseClicked

    private void ListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListTableMouseClicked
        // TODO add your handling code here:
        System.out.println(ListTable.getSelectedValue());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String query="select * from "+ListTable.getSelectedValue();
            System.out.println(query);
            Statement stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            rs.last();
            int row=rs.getRow();
            rs.beforeFirst();
            int col=rsmd.getColumnCount();
            Object obj[][]=new Object[row][col];
            Object objNew[][]=new Object[1][col];
            String colnm[]=new String[col];
            int i=0;
            while(rs.next())
            {
                for(int j=0;j<col;++j)
                {
                    obj[i][j]=rs.getString(j+1);
                    System.out.print(obj[i][j]+" ");
                }
                i++;
                System.out.println();
            }
            for(i=0;i<col;++i)
            {
                colnm[i]=rsmd.getColumnName(i+1);
                objNew[0][i]="";
            }
            Table.setModel(new javax.swing.table.DefaultTableModel(obj,colnm));
            TableInsert.setModel(new javax.swing.table.DefaultTableModel(objNew,colnm));
            tableBackup=new javax.swing.table.DefaultTableModel(obj,colnm);
            InsertPanel.setVisible(true);
            RHSPanel.setVisible(true);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_ListTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Logout");
        new mainPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        System.out.println("hello");
        if(Table.getTableHeader().equals(evt.getSource()))
        {
            String colName=Table.getColumnName(Table.getTableHeader().columnAtPoint(evt.getPoint()));
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con=null;
                con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
                if(con==null)
                    JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
                String tableName=ListTable.getSelectedValue().toString();
                String query="";
                if(order==0)
                {
                    query="SELECT * FROM `"+tableName+"` Order by `"+colName+"` ASC";
                    order=1;
                }
                else 
                {
                    query="SELECT * FROM `"+tableName+"` Order by `"+colName+"` DESC";
                    order=0;
                }
                System.out.println(query);
                Statement stmt=con.createStatement();
                ResultSet rs=stmt.executeQuery(query);
                ResultSetMetaData rsmd=rs.getMetaData();
                rs.last();
                int row=rs.getRow();
                rs.beforeFirst();;
                int col=rsmd.getColumnCount();
                Object obj[][]=new Object[row][col];
                String colnm[]=new String[col];
                int i=0;
                while(rs.next())
                {
                    for(int j=0;j<col;++j)
                    {
                        obj[i][j]=rs.getString(j+1);
                        System.out.print(obj[i][j]+" ");
                    }
                    i++;
                    System.out.println();
                }
                for(i=0;i<col;++i)
                    colnm[i]=rsmd.getColumnName(i+1);
                Table.setModel(new javax.swing.table.DefaultTableModel(obj,colnm));
                tableBackup=new javax.swing.table.DefaultTableModel(obj,colnm);
                RHSPanel.setVisible(true);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_TableMouseClicked
    private void TableTableChanged(javax.swing.event.TableModelEvent evt){
        System.out.println(evt);
        //System.out.println(evt);
    }
    private void TableVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_TableVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_TableVetoableChange

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String tableName=ListTable.getSelectedValue().toString();
            int nCols=Table.getModel().getColumnCount();
            String[] colNames=new String[nCols];
            for(int i=0;i<nCols;++i)
                colNames[i]=Table.getModel().getColumnName(i);
            int nRows=Table.getModel().getRowCount();
            String query="DELETE from `"+tableName+"` where 1";
            Statement stmt=con.createStatement();
            stmt.executeUpdate(query);
            query="INSERT INTO `"+tableName+"`(`";
            for(int i=0;i<nCols;++i)
            {
                if(i!=nCols-1)
                    query=query+colNames[i]+"`,`";
                else
                    query=query+colNames[i]+"`) VALUES ('";
            }
            for(int i=0;i<nRows;++i)
            {
                String tQuery=query;
                for(int j=0;j<nCols;++j)
                {
                    if(j!=nCols-1)
                        tQuery=tQuery+Table.getModel().getValueAt(i, j)+"','";
                    else
                        tQuery=tQuery+Table.getModel().getValueAt(i, j)+"')"; 
                }
                System.out.println(tQuery);
                try{
                    int ret=stmt.executeUpdate(tQuery);
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(this, "Error updating row "+Integer.toString(i+1));
                    JOptionPane.showMessageDialog(this, e.getMessage());
                    tQuery=query;
                    for(int j=0;j<nCols;++j)
                    {
                        if(j!=nCols-1)
                            tQuery=tQuery+tableBackup.getValueAt(i, j)+"','";
                        else
                            tQuery=tQuery+tableBackup.getValueAt(i, j)+"')"; 
                    }
                    System.out.println(tQuery);
                    stmt.executeUpdate(tQuery);
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void bDelRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDelRowActionPerformed
        // TODO add your handling code here:
        int selRow=Table.getSelectedRow();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String tableName=ListTable.getSelectedValue().toString();
            int nCols=Table.getModel().getColumnCount();
            String[] colNames=new String[nCols];
            for(int i=0;i<nCols;++i)
                colNames[i]=Table.getModel().getColumnName(i);
            String query="DELETE from `"+tableName+"` where ";
            Statement stmt=con.createStatement();
            for(int i=0;i<nCols;++i)
            {
                if(i!=nCols-1)
                    query=query+colNames[i]+"='"+Table.getValueAt(selRow, i)+"' and ";
                else
                    query=query+colNames[i]+"='"+Table.getValueAt(selRow, i)+"'";
            }
            System.out.println(query);
            stmt.executeUpdate(query);
            
            System.out.println(ListTable.getSelectedValue());
            query="select * from "+ListTable.getSelectedValue();
            System.out.println(query);
            stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            rs.last();
            int row=rs.getRow();
            rs.beforeFirst();;
            int col=rsmd.getColumnCount();
            Object obj[][]=new Object[row][col];
            String colnm[]=new String[col];
            int i=0;
            while(rs.next())
            {
                for(int j=0;j<col;++j)
                {
                    obj[i][j]=rs.getString(j+1);
                    System.out.print(obj[i][j]+" ");
                }
                i++;
                System.out.println();
            }
            for(i=0;i<col;++i)
                colnm[i]=rsmd.getColumnName(i+1);
            Table.setModel(new javax.swing.table.DefaultTableModel(obj,colnm));
            tableBackup=new javax.swing.table.DefaultTableModel(obj,colnm);
            RHSPanel.setVisible(true);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_bDelRowActionPerformed

    private void bInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=null;
            con= (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/SIMS","root","");
            if(con==null)
                JOptionPane.showMessageDialog(this, "Unable to Connect to server!!!");
            String tableName=ListTable.getSelectedValue().toString();
            int nCols=Table.getModel().getColumnCount();
            String[] colNames=new String[nCols];
            Statement stmt=con.createStatement();
            for(int i=0;i<nCols;++i)
                colNames[i]=Table.getModel().getColumnName(i);
            String query="INSERT INTO `"+tableName+"`(`";
            for(int i=0;i<nCols;++i)
            {
                if(i!=nCols-1)
                    query=query+colNames[i]+"`,`";
                else
                    query=query+colNames[i]+"`) VALUES ('";
            }
            String tQuery=query;
            for(int j=0;j<nCols;++j)
            {
                if(j!=nCols-1)
                    tQuery=tQuery+TableInsert.getModel().getValueAt(0, j)+"','";
                else
                    tQuery=tQuery+TableInsert.getModel().getValueAt(0, j)+"')"; 
            }
            System.out.println(tQuery);
            try{
                stmt.executeUpdate(tQuery);
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            for(int i=0;i<nCols;++i)
            {
                TableInsert.setValueAt("", 0, i);
            }
            
            System.out.println(ListTable.getSelectedValue());
            query="select * from "+ListTable.getSelectedValue();
            System.out.println(query);
            stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            rs.last();
            int row=rs.getRow();
            rs.beforeFirst();;
            int col=rsmd.getColumnCount();
            Object obj[][]=new Object[row][col];
            String colnm[]=new String[col];
            int i=0;
            while(rs.next())
            {
                for(int j=0;j<col;++j)
                {
                    obj[i][j]=rs.getString(j+1);
                    System.out.print(obj[i][j]+" ");
                }
                i++;
                System.out.println();
            }
            for(i=0;i<col;++i)
                colnm[i]=rsmd.getColumnName(i+1);
            Table.setModel(new javax.swing.table.DefaultTableModel(obj,colnm));
            tableBackup=new javax.swing.table.DefaultTableModel(obj,colnm);
            RHSPanel.setVisible(true);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_bInsertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AHP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CMDMode;
    private javax.swing.JPanel GUIMode;
    private javax.swing.JPanel InsertPanel;
    private javax.swing.JPanel LHSPanel;
    private javax.swing.JPanel LHSPanel1;
    private javax.swing.JLabel LQuery;
    private javax.swing.JList ListTable;
    private javax.swing.JList ListTable1;
    private javax.swing.JPanel Logout;
    private javax.swing.JPanel RHSPanel;
    private javax.swing.JPanel RHSPanel1;
    private javax.swing.JTable Table;
    private javax.swing.JTable Table1;
    private javax.swing.JTable TableInsert;
    private javax.swing.JButton bDelRow;
    private javax.swing.JButton bExecute;
    private javax.swing.JButton bInsert;
    private javax.swing.JButton bSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea queryArea;
    // End of variables declaration//GEN-END:variables
}
